// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "music-service/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	spotify "github.com/zmb3/spotify"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateToken mocks base method.
func (m *MockAuthorization) CreateToken(username, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", username, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockAuthorizationMockRecorder) CreateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockAuthorization)(nil).CreateToken), username, password)
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GetUserByEmail mocks base method.
func (m *MockAuthorization) GetUserByEmail(email string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", email)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockAuthorizationMockRecorder) GetUserByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockAuthorization)(nil).GetUserByEmail), email)
}

// InvalidateToken mocks base method.
func (m *MockAuthorization) InvalidateToken(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateToken", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateToken indicates an expected call of InvalidateToken.
func (mr *MockAuthorizationMockRecorder) InvalidateToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateToken", reflect.TypeOf((*MockAuthorization)(nil).InvalidateToken), userID)
}

// IsTokenValid mocks base method.
func (m *MockAuthorization) IsTokenValid(token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenValid", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenValid indicates an expected call of IsTokenValid.
func (mr *MockAuthorizationMockRecorder) IsTokenValid(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenValid", reflect.TypeOf((*MockAuthorization)(nil).IsTokenValid), token)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(accessToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), accessToken)
}

// MockPlayList is a mock of PlayList interface.
type MockPlayList struct {
	ctrl     *gomock.Controller
	recorder *MockPlayListMockRecorder
}

// MockPlayListMockRecorder is the mock recorder for MockPlayList.
type MockPlayListMockRecorder struct {
	mock *MockPlayList
}

// NewMockPlayList creates a new mock instance.
func NewMockPlayList(ctrl *gomock.Controller) *MockPlayList {
	mock := &MockPlayList{ctrl: ctrl}
	mock.recorder = &MockPlayListMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlayList) EXPECT() *MockPlayListMockRecorder {
	return m.recorder
}

// CreatePlaylist mocks base method.
func (m *MockPlayList) CreatePlaylist(playlist *models.Playlist) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaylist", playlist)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaylist indicates an expected call of CreatePlaylist.
func (mr *MockPlayListMockRecorder) CreatePlaylist(playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaylist", reflect.TypeOf((*MockPlayList)(nil).CreatePlaylist), playlist)
}

// DeletePlaylistById mocks base method.
func (m *MockPlayList) DeletePlaylistById(userId, playlistId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePlaylistById", userId, playlistId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePlaylistById indicates an expected call of DeletePlaylistById.
func (mr *MockPlayListMockRecorder) DeletePlaylistById(userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePlaylistById", reflect.TypeOf((*MockPlayList)(nil).DeletePlaylistById), userId, playlistId)
}

// GetAllPlaylists mocks base method.
func (m *MockPlayList) GetAllPlaylists(userId int) ([]*models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPlaylists", userId)
	ret0, _ := ret[0].([]*models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPlaylists indicates an expected call of GetAllPlaylists.
func (mr *MockPlayListMockRecorder) GetAllPlaylists(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPlaylists", reflect.TypeOf((*MockPlayList)(nil).GetAllPlaylists), userId)
}

// GetPlaylistById mocks base method.
func (m *MockPlayList) GetPlaylistById(userId, playlistId int) (*models.Playlist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlaylistById", userId, playlistId)
	ret0, _ := ret[0].(*models.Playlist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistById indicates an expected call of GetPlaylistById.
func (mr *MockPlayListMockRecorder) GetPlaylistById(userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistById", reflect.TypeOf((*MockPlayList)(nil).GetPlaylistById), userId, playlistId)
}

// UpdatePlaylistById mocks base method.
func (m *MockPlayList) UpdatePlaylistById(userId int, playlist *models.Playlist) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePlaylistById", userId, playlist)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePlaylistById indicates an expected call of UpdatePlaylistById.
func (mr *MockPlayListMockRecorder) UpdatePlaylistById(userId, playlist interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePlaylistById", reflect.TypeOf((*MockPlayList)(nil).UpdatePlaylistById), userId, playlist)
}

// MockSong is a mock of Song interface.
type MockSong struct {
	ctrl     *gomock.Controller
	recorder *MockSongMockRecorder
}

// MockSongMockRecorder is the mock recorder for MockSong.
type MockSongMockRecorder struct {
	mock *MockSong
}

// NewMockSong creates a new mock instance.
func NewMockSong(ctrl *gomock.Controller) *MockSong {
	mock := &MockSong{ctrl: ctrl}
	mock.recorder = &MockSongMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSong) EXPECT() *MockSongMockRecorder {
	return m.recorder
}

// CreateSong mocks base method.
func (m *MockSong) CreateSong(userId, playlistId int, song *models.Song) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSong", userId, playlistId, song)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSong indicates an expected call of CreateSong.
func (mr *MockSongMockRecorder) CreateSong(userId, playlistId, song interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSong", reflect.TypeOf((*MockSong)(nil).CreateSong), userId, playlistId, song)
}

// DeleteSongFromPlaylist mocks base method.
func (m *MockSong) DeleteSongFromPlaylist(userId, playlistId int, songId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSongFromPlaylist", userId, playlistId, songId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSongFromPlaylist indicates an expected call of DeleteSongFromPlaylist.
func (mr *MockSongMockRecorder) DeleteSongFromPlaylist(userId, playlistId, songId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSongFromPlaylist", reflect.TypeOf((*MockSong)(nil).DeleteSongFromPlaylist), userId, playlistId, songId)
}

// GetAllSongsFromPlaylist mocks base method.
func (m *MockSong) GetAllSongsFromPlaylist(userId, playlistId int) ([]*models.Song, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSongsFromPlaylist", userId, playlistId)
	ret0, _ := ret[0].([]*models.Song)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSongsFromPlaylist indicates an expected call of GetAllSongsFromPlaylist.
func (mr *MockSongMockRecorder) GetAllSongsFromPlaylist(userId, playlistId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSongsFromPlaylist", reflect.TypeOf((*MockSong)(nil).GetAllSongsFromPlaylist), userId, playlistId)
}

// GetTrackByID mocks base method.
func (m *MockSong) GetTrackByID(trackID string) (*spotify.FullTrack, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrackByID", trackID)
	ret0, _ := ret[0].(*spotify.FullTrack)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrackByID indicates an expected call of GetTrackByID.
func (mr *MockSongMockRecorder) GetTrackByID(trackID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrackByID", reflect.TypeOf((*MockSong)(nil).GetTrackByID), trackID)
}
